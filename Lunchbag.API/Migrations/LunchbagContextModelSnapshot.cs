// <auto-generated />
using System;
using Lunchbag.API.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Lunchbag.API.Migrations
{
    [DbContext(typeof(LunchbagContext))]
    partial class LunchbagContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("Lunchbag.API.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Snacks"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Drinks"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Sweets"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Vegan"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Special"
                        });
                });

            modelBuilder.Entity("Lunchbag.API.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Lunchbag.API.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Lunchbag.API.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("Lunchbag.API.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("Stock")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Name = "Brezel",
                            Price = 1.50m,
                            Stock = 0
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Name = "Wurstsemmel",
                            Price = 3.20m,
                            Stock = 0
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Name = "Burger",
                            Price = 2.80m,
                            Stock = 0
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            Name = "Kartoffelchips",
                            Price = 1.80m,
                            Stock = 0
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            Name = "Apfelschorle",
                            Price = 2.00m,
                            Stock = 0
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            Name = "Radler",
                            Price = 3.50m,
                            Stock = 0
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            Name = "Limonade",
                            Price = 3.00m,
                            Stock = 0
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 2,
                            Name = "Kaffee",
                            Price = 2.20m,
                            Stock = 0
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 3,
                            Name = "Schwarzwälder Kirschtorte",
                            Price = 4.50m,
                            Stock = 0
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 3,
                            Name = "Lebkuchen",
                            Price = 2.00m,
                            Stock = 0
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 3,
                            Name = "Muffin",
                            Price = 3.00m,
                            Stock = 0
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 3,
                            Name = "Donut",
                            Price = 1.50m,
                            Stock = 0
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 4,
                            Name = "Vegane Linsensuppe",
                            Price = 3.80m,
                            Stock = 0
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 4,
                            Name = "Tofu-Schnitzel",
                            Price = 5.00m,
                            Stock = 0
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 4,
                            Name = "Gemüseburger",
                            Price = 4.20m,
                            Stock = 0
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 4,
                            Name = "Quinoa-Salat",
                            Price = 3.90m,
                            Stock = 0
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 5,
                            Name = "Sauerbraten",
                            Price = 8.90m,
                            Stock = 0
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 5,
                            Name = "Weißwurst mit Brezel",
                            Price = 6.50m,
                            Stock = 0
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 5,
                            Name = "Schweinshaxe",
                            Price = 9.50m,
                            Stock = 0
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 5,
                            Name = "Kartoffelsalat",
                            Price = 3.50m,
                            Stock = 0
                        });
                });

            modelBuilder.Entity("Lunchbag.API.Entities.ShoppingCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("ShoppingCart");
                });

            modelBuilder.Entity("Lunchbag.API.Entities.ShoppingCartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ShoppingCartId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("ShoppingCartItem");
                });

            modelBuilder.Entity("Lunchbag.API.Entities.Order", b =>
                {
                    b.HasOne("Lunchbag.API.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Lunchbag.API.Entities.OrderItem", b =>
                {
                    b.HasOne("Lunchbag.API.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lunchbag.API.Entities.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Lunchbag.API.Entities.Product", b =>
                {
                    b.HasOne("Lunchbag.API.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Lunchbag.API.Entities.ShoppingCart", b =>
                {
                    b.HasOne("Lunchbag.API.Entities.Customer", "Customer")
                        .WithOne("ShoppingCart")
                        .HasForeignKey("Lunchbag.API.Entities.ShoppingCart", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Lunchbag.API.Entities.ShoppingCartItem", b =>
                {
                    b.HasOne("Lunchbag.API.Entities.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lunchbag.API.Entities.ShoppingCart", "ShoppingCart")
                        .WithMany("CartItems")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("Lunchbag.API.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Lunchbag.API.Entities.Customer", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("ShoppingCart")
                        .IsRequired();
                });

            modelBuilder.Entity("Lunchbag.API.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Lunchbag.API.Entities.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Lunchbag.API.Entities.ShoppingCart", b =>
                {
                    b.Navigation("CartItems");
                });
#pragma warning restore 612, 618
        }
    }
}
